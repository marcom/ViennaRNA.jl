#!/usr/bin/env julia

import Pkg

cd(@__DIR__)
Pkg.activate(".")

# Stack environment from parent dir on top of env from this dir.  This
# is so we can import ViennaRNA_jll and always have the same version
# as the parent dir.
pushfirst!(LOAD_PATH, joinpath(@__DIR__, ".."))
println("LOAD_PATH =")
display(LOAD_PATH)
println()

import Clang
using Clang.Generators
using ViennaRNA_jll

pkgver(mod::Module) = Pkg.TOML.parsefile(joinpath(pkgdir(mod), "Project.toml"))["version"]
# this version can only deal with dependencies from the top active
# environment, but not ones stacked below
#pkgver(name) = filter(p -> p.name == name, collect(values(Pkg.dependencies()))) |> only |> p -> p.version

version_Clang = pkgver(Clang)
version_ViennaRNA_jll = pkgver(ViennaRNA_jll)
println("Clang version         = $version_Clang")
println("ViennaRNA_jll version = $version_ViennaRNA_jll")
open("./prologue.jl", "w") do io
    println(io, "# this file was autogenerated by gen/generator.jl")
    println(io)
    println(io, "# package versions used to generate this file")
    println(io, "const VERSION_GEN_Clang = v\"", version_Clang, "\"")
    println(io, "const VERSION_GEN_ViennaRNA_jll = v\"", version_ViennaRNA_jll, "\"")
end

include_dir = normpath(ViennaRNA_jll.artifact_dir, "include")
viennarna_dir = joinpath(include_dir, "ViennaRNA")

options = load_options(joinpath(@__DIR__, "generator.toml"))
print("options =\n  ")
display(options)

args = get_default_args()
append!(args, [
    "-I$include_dir",
    "-DVRNA_DISABLE_C11_FEATURES",
])

accept_headers = [
    "equilibrium_probs.h",
    "eval.h",
    "fold_compound.h",
    "heat_capacity.h",
    "inverse.h",
    "landscape/neighbor.h",
    "MEA.h",
    "mfe.h",
    "mfe_window.h",
    "params/io.h",
    "part_func.h",
    "part_func_window.h",
    "plotting/layouts.h",
    "subopt.h",
    "subopt_zuker.h",
    "treedist.h",
    "utils/basic.h",
]
headers = [joinpath(viennarna_dir, header) for header in accept_headers]
# there is also an experimental `detect_headers` function for auto-detecting top-level headers in the directory
# headers = detect_headers(clang_dir, args)

# create context
ctx = create_context(headers, args, options)

# run generator
build!(ctx)
